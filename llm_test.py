"""
Single‚Äëfile Streamlit Chatbot (OpenAI¬†v1¬†compatible)
===================================================
Run:
    streamlit run Chatbot.py

Install once:
    pip install streamlit openai  # openai>=1.3.0 Êé®Â•®

Secrets:
    Streamlit Cloud ‚Üí Settings ‚Üí Secrets „Åß
    OPENAI_API_KEY="sk‚Äë..."

„É≠„Éº„Ç´„É´„Å™„Çâ:
    export OPENAI_API_KEY="sk‚Äë..."  # Windows „ÅØ set
"""
from __future__ import annotations
import os
import sys
import streamlit as st

# -----------------------------------------------------------------------------
# 0.  OpenAI „Ç≠„Éº
# -----------------------------------------------------------------------------
OPENAI_API_KEY: str | None = (
    st.secrets.get("OPENAI_API_KEY")  # Cloud
    or os.getenv("OPENAI_API_KEY")    # Local
)
if not OPENAI_API_KEY:
    st.error("OPENAI_API_KEY „ÅåË¶ã„Å§„Åã„Çâ„Å∏„Çì„ÅßÔºÅSecrets „ÅãÁí∞Â¢ÉÂ§âÊï∞„Å´„Çª„ÉÉ„Éà„Åó„Å¶„Å™„ÄÇ")
    st.stop()

# -----------------------------------------------------------------------------
# 1.  openai „É©„Ç§„Éñ„É©„É™„Å®„ÅÆ‰∫íÊèõÂ±§
# -----------------------------------------------------------------------------
try:
    # openai>=1.0 „Åß„ÅØ OpenAI „ÇØ„É©„ÇπÁµåÁî±
    from openai import OpenAI  # type: ignore

    _client = OpenAI(api_key=OPENAI_API_KEY)

    def stream_chat_completion(messages: list[dict]) -> object:  # returns generator
        return _client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            stream=True,
        )

except ImportError:  # fall back to <1.0 interface
    import openai  # type: ignore

    if tuple(map(int, openai.__version__.split("."))) >= (1, 0):
        st.exception(
            RuntimeError(
                "openai>=1.0 „ÅåÂÖ•„Å£„Å¶„ÅÑ„Çã„ÅÆ„Å´ ImportError „ÅåÂá∫„ÅüÂ†¥Âêà„ÅØ‰æùÂ≠òÈñ¢‰øÇ„ÅÆÁ´∂Âêà„Åã„ÇÇ„ÄÇ\n"
                "\nÂØæÂá¶: `pip install --upgrade --no‚Äëcache‚Äëdir openai streamlit` „ÅßÂÜç„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã„Åã„ÄÅ\n"
                "Êóß API „Çí‰Ωø„ÅÑ„Åü„ÅÑ„Å™„Çâ `pip install openai==0.28` „Å´Âõ∫ÂÆö„Åó„Å¶„ÇÑ„ÄÇ"
            )
        )
        st.stop()

    openai.api_key = OPENAI_API_KEY

    def stream_chat_completion(messages: list[dict]) -> object:
        return openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            stream=True,
        )

# -----------------------------------------------------------------------------
# 2.  „Éö„Éº„Ç∏Ë®≠ÂÆö
# -----------------------------------------------------------------------------
st.set_page_config(page_title="Chatbot", page_icon="ü§ñ", initial_sidebar_state="collapsed")
st.title("ü§ñ Chatbot (Streamlit √ó OpenAI)")

# -----------------------------------------------------------------------------
# 3.  „ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥„ÅÆÂàùÊúüÂåñ
# -----------------------------------------------------------------------------
if "messages" not in st.session_state:
    st.session_state.messages: list[dict] = [
        {"role": "assistant", "content": "„Åì„Çì„Å´„Å°„ÅØÔºÅ„Å™„Çì„Åß„ÇÇËÅû„ÅÑ„Å¶„ÇÑ„Äú"}
    ]

# -----------------------------------------------------------------------------
# 4.  „Åì„Çå„Åæ„Åß„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
# -----------------------------------------------------------------------------
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# -----------------------------------------------------------------------------
# 5.  „É¶„Éº„Ç∂„ÉºÂÖ•Âäõ
# -----------------------------------------------------------------------------
if prompt := st.chat_input("„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ„Åó„Å¶„ÇÑ„Äú"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # -------------------------------------------------------------------------
    # 6.  OpenAI „Å∏Âïè„ÅÑÂêà„Çè„ÅõÔºà„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞Ë°®Á§∫Ôºâ
    # -------------------------------------------------------------------------
    try:
        response = stream_chat_completion(st.session_state.messages)
    except Exception as e:
        st.error(f"OpenAI API Âëº„Å≥Âá∫„Åó„Åß„Ç®„É©„Éº: {e}")
        st.stop()

    full_reply = ""
    with st.chat_message("assistant"):
        placeholder = st.empty()
        for chunk in response:
            # openai>=1.0 „Å® <1.0 „Åß JSON ÂΩ¢„ÅåÈÅï„ÅÜ„ÅÆ„Åß‰∏°ÂØæÂøú
            delta = (
                chunk.choices[0].delta  # >=1.0 (pydantic obj)
                if hasattr(chunk.choices[0], "delta")
                else chunk.choices[0].delta  # type: ignore[attr-defined]
            )
            content = getattr(delta, "content", None) or delta.get("content")
            if content:
                full_reply += content
                placeholder.markdown(full_reply + "‚ñå")
        placeholder.markdown(full_reply)

    st.session_state.messages.append({"role": "assistant", "content": full_reply})

# -----------------------------------------------------------------------------
# 7.  „Éï„ÉÉ„Çø„Éº
# -----------------------------------------------------------------------------
st.markdown("---")
st.caption("Made with ‚ù§Ô∏è & Streamlit")
